body {
  font-family: 'Lora', serif;
  width: 100%;
  height: 100%;
  background: #fbfbfb; }

.nav-main-option {
  margin-top: 2em;
  background: #fbfbfb; }

@media (max-width: 360px) {
  .logo-nav {
    width: 200px;
    margin-top: 5px;
    margin-left: -10px; } }

.container .navbar-menu-option li {
  font-size: 0.8em;
  font-weight: bold;
  margin-left: 30px;
  padding: 0 10px 18px;
  text-transform: uppercase;
  border-bottom: 2px solid rgba(77, 77, 77, 0.6);
  -webkit-box-shadow: 0 5px 3px -5px rgba(0, 0, 0, 0.2);
  -moz-box-shadow: 0 5px 3px -5px rgba(0, 0, 0, 0.2);
  box-shadow: 0 5px 3px -5px rgba(0, 0, 0, 0.2); }
  @media (min-width: 1200px) {
    .container .navbar-menu-option li {
      font-size: 0.8em; } }
  .container .navbar-menu-option li:hover {
    padding: 0 10px 12px;
    transition: border-bottom 0.4s;
    border-bottom: 4px solid #2f66b0; }

@media (max-width: 62em) {
  .navbar-nav {
    padding-top: 0.425rem;
    padding-left: 0.75rem; }
  .navbar-nav .nav-item {
    float: none; }
  .navbar-brand,
  .navbar-nav .nav-item {
    display: block; }
  .navbar-nav .nav-item + .nav-item {
    margin-left: 0; }
  .dropdown-menu {
    position: relative;
    float: none; } }

.dropdown-bg,
.jumbotron {
  background: #fbfbfb; }

.header-content {
  width: 100%;
  height: 500px;
  margin: 0;
  animation: breath 20s linear infinite;
  background-image: url("https://images.pexels.com/photos/315752/pexels-photo-315752.jpeg?w=1260&h=750&auto=compress&cs=tinysrgb");
  background-repeat: no-repeat;
  background-position: center; }
  @media (max-width: 575px) {
    .header-content {
      width: 100%; } }

#header .header-content {
  width: 100%;
  height: 100%;
  padding: 45px; }
  @media (max-width: 575px) {
    #header .header-content {
      margin-bottom: 50px;
      padding: 15px 15px 20px; } }
  @media (min-width: 576px) and (max-width: 767px) {
    #header .header-content {
      margin-bottom: 50px; } }

#header .header-main-content {
  min-height: 90%;
  background: #fbfbfb;
  -webkit-box-shadow: 5px 5px 1px 2px #2f66b0;
  -moz-box-shadow: 5px 5px 1px 2px #2f66b0;
  box-shadow: 5px 5px 1px 2px #2f66b0; }
  @media (min-width: 1200px) {
    #header .header-main-content {
      max-width: 40%; } }
  @media (min-width: 992px) and (max-width: 1199px) {
    #header .header-main-content {
      max-width: 50%; } }
  @media (min-width: 768px) and (max-width: 991px) {
    #header .header-main-content {
      max-width: 70%; } }
  @media (min-width: 576px) and (max-width: 767px) {
    #header .header-main-content {
      max-width: 100%; } }
  @media (max-width: 575px) {
    #header .header-main-content {
      max-width: 100%; } }
  #header .header-main-content h1 {
    font-size: 26px;
    font-weight: bold;
    position: relative;
    padding: 25px; }
    @media (max-width: 575px) {
      #header .header-main-content h1 {
        font-size: 24px;
        padding: 15px; } }
    #header .header-main-content h1::after {
      position: absolute;
      z-index: 0;
      top: 100%;
      right: 50%;
      bottom: 0;
      left: 0;
      margin-left: 25px;
      content: '';
      border-top: 2px solid #2f66b0; }
      @media (max-width: 575px) {
        #header .header-main-content h1::after {
          margin-left: 15px; } }
  #header .header-main-content .header-text-container {
    padding: 25px; }
    @media (max-width: 575px) {
      #header .header-main-content .header-text-container {
        padding: 15px; } }

#main-content h3 {
  font-size: 26px; }
  @media (min-width: 1200px) {
    #main-content h3 {
      font-size: 32px; } }

#main-content a {
  margin-top: 40px; }

.main-content-text {
  font-size: 13px; }

.main-content-border {
  position: relative;
  top: 10%;
  right: 60%;
  bottom: 0;
  left: 0;
  padding-top: 20px;
  border-top: 2px solid rgba(77, 77, 77, 0.6); }
  .main-content-border::after {
    position: absolute;
    z-index: -1;
    top: -4px;
    right: 60%;
    bottom: 0;
    left: 0;
    content: '';
    border-width: 20px;
    border-top: 4px solid #2f66b0; }

.fa-angle-left,
.fa-angle-right {
  font-size: 40px; }

.fa-angle-right {
  margin-left: 10px; }

.carousel-item-css {
  width: 60%;
  margin: auto; }

#system-advantages .d-lg-block,
#system-advantages .d-lg-none {
  margin-top: 200px;
  margin-left: 50px;
  padding-bottom: 500px;
  height: 100%; }

#system-advantages .d-lg-none {
  margin-top: 100px; }

.content-advantages-border {
  font-weight: bold;
  position: relative; }
  .content-advantages-border h3 {
    position: relative;
    font-weight: bold; }
    .content-advantages-border h3::after {
      content: '';
      position: absolute;
      z-index: 1;
      top: 30%;
      right: 18%;
      bottom: -30%;
      left: 0;
      padding-bottom: 10px;
      border-bottom: 2px solid rgba(77, 77, 77, 0.6); }
  .content-advantages-border::after {
    position: absolute;
    z-index: 0;
    top: 25%;
    right: 30%;
    bottom: -32%;
    left: 0;
    width: 30%;
    content: '';
    border-bottom: 4px solid #2f66b0; }
  @media (min-width: 768px) and (max-width: 991px) {
    .content-advantages-border {
      width: 80%;
      margin: auto; } }
  @media (min-width: 576px) and (max-width: 767px) {
    .content-advantages-border {
      width: 90%;
      margin: auto; }
      .content-advantages-border h3 {
        font-size: 24px; }
        .content-advantages-border h3::after {
          right: 8%; } }
  @media (max-width: 575px) {
    .content-advantages-border {
      width: 100%;
      margin: auto auto auto -10px; }
      .content-advantages-border h3 {
        font-size: 22px; }
        .content-advantages-border h3::after {
          right: 9%; } }
  @media (max-width: 350px) {
    .content-advantages-border {
      width: 110%;
      margin: auto; }
      .content-advantages-border h3 {
        font-size: 22px; }
        .content-advantages-border h3::after {
          right: 18%; } }

.adva-content {
  position: relative;
  max-height: 500px; }
  .adva-content .adva-list {
    position: absolute;
    top: 33%;
    left: 8%;
    right: 0;
    bottom: 100px;
    list-style: none; }
    .adva-content .adva-list li {
      margin-bottom: 39px;
      font-weight: bold; }
      @media (max-width: 450px) {
        .adva-content .adva-list li {
          margin-bottom: 46.5px;
          font-size: 12px;
          margin-left: 10px; } }
      @media (max-width: 350px) {
        .adva-content .adva-list li {
          margin-bottom: 50.5px;
          font-size: 10px;
          margin-left: 20px; } }
  @media (min-width: 768px) and (max-width: 991px) {
    .adva-content {
      margin-left: 10%; } }
  @media (min-width: 576px) and (max-width: 767px) {
    .adva-content {
      margin-left: 7%; } }
  @media (max-width: 575px) {
    .adva-content {
      margin-left: -10%; } }

.image-man-box {
  margin-left: 0;
  margin-bottom: 100px;
  position: relative; }
  .image-man-box .image-man {
    width: 85%;
    height: auto; }
  .image-man-box::after {
    content: '';
    position: absolute;
    z-index: 1;
    top: 0;
    right: 50%;
    bottom: -2%;
    left: 1%;
    padding-bottom: 10px;
    border-bottom: 20px solid #2f66b0; }

@media (min-width: 992px) and (max-width: 1199px) {
  .image-man-box {
    margin-left: 50px; }
    .image-man-box .image-man {
      width: 380px;
      height: 380px; } }

@media (min-width: 1200px) {
  .image-man-box {
    margin-left: 50px; } }

@media (max-width: 350px) {
  .image-man-box {
    margin-left: 0; } }

/*# sourceMappingURL=data:application/json;base64, */